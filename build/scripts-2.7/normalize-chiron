#!/usr/bin/python
import sys
import os
import datetime
import math


import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator

import pyfits

import interactivenorm

# Normalize-CHIRON version 2.0.3
# Written by Brandon Bell April 2013
#
# Normalization-CHIRON calls an IDL routine to interactivly normalize each
# order of a file and then dumps all the fit data, normalized data, and plots
# of the fit into .tgz archives. It then makes a .fits of the data with
# apprpriate headers

# When re-normalizing the median file comes first then the data be
# re-normalized you don't have to overwrite it if you don't want.
renorm = False
filename = sys.argv[1]
if len(sys.argv) == 3:
    renormfile = sys.argv[2]
    renorm = True
orders = range(62)

# Read in the fits file(s) and retirve header info for latter use.
spectra, header = pyfits.getdata(filename, 0, header=True)
if renorm == True:
    respec, reheader = pyfits.getdata(renormfile, 0, header=True)
objectn = header['object']
objectn = objectn.split('-')[0] #in case of combined name and date.
objectd = header['UTSHUT']
objectd = objectd.split('T')[0] #Keeps only date, not the time of exp.

newdir = objectn+'-'+objectd+'/'
pwd = os.getcwd()
if pwd.split('/')[-1] != objectn+'-'+objectd:
    try:
        os.chdir(pwd+'/'+newdir)
    except:
        os.system('mkdir '+pwd+'/'+newdir)
        os.chdir(newdir)
# Variables for the whole spec plot tick labeling.
majorLocator   = MultipleLocator(100)
minorLocator   = MultipleLocator(25)

# start normalizing the spectra with interactive norm and if your renormalizing
# the data, load the previously pickled data start from there.
spect = interactivenorm.SpecNormalize(spectra, header)
try:
    spect.read_pickle()
except:
    pass
if renorm == True:
    spect.norm = np.copy(respec)
spect.start_norm()
spect.write_pickle()
spec = spectra


def yesnocheck(yn):
    """Check weither or not user yes/no input is in the right format and if
    it's not, ask for new input"""
    if yn =='y':
        return yn
    elif yn=='n':
        return yn
    else:
        print('Please enter yes (y) or no (n)')
        yn = raw_input('(y/n): ')
        yesnocheck(yn)
    return yn

def smooth3(x):
   global sm
   nelm = np.shape(x)[1]
   sm = np.zeros( (62,int(math.floor(nelm/3)),2) )
   for o in range(62):
       for i in range(int(math.floor(nelm/3))):
          n=3*i
          sm[o,i,0] = ( x[o,n,0] + x[o,n+1,0] + x[o,n+2,0] ) / 3
          sm[o,i,1] = ( x[o,n,1] + x[o,n+1,1] + x[o,n+2,1] ) / 3
   return sm;


do_plot = raw_input('Make Plots and .dat files? (y/n) ')
yesnocheck(do_plot)

if do_plot == 'y':
    for order in orders:
        ro = str(int(order))
        # Create nessesary file names for data transfer file and the text file
        # that will hold normalized dat for saving and write the IDL transfer
        # file.
        normspecname = str(objectn+'-'+objectd+'-'+'Order'+ro+
                           '-Normalized-Data.dat')
        fitfilename = str(objectn+'-'+
                          objectd+'-'+'Order'+ro+'-Fit-Function.dat')
        fit = spect.fit
        normspec = spect.norm
        fitpoints = spect.fitpoints

        # Make a line array for plotting on the normaliztion fit plots.
        redline = np.copy(normspec[order,:,:])
        redline[:,1] = 1

        np.savetxt(normspecname, normspec[order,:,:])
        np.savetxt(fitfilename, fit[order,:,:])
        # Make a plot of the fit and un-normalized data to check the fit at
        # latter times if something seems fishy in the data.
        xmin = normspec[order,0,0]
        xmax = normspec[order,800,0]
        ymax = np.amax(spec[order,:,1])
        pp = np.where(fitpoints[order,:,0] == 0)
        pr = int(np.amin(pp))
        plt.clf()
        fig=plt.figure(1)
        fig.suptitle(objectn+' '+objectd+' Order '+ro)
        plt.subplot(211)
        plt.ylabel('Flux')
        plt.title('Data and Fit')
        plt.plot(spec[order,:,0],spec[order,:,1])
        plt.plot(fit[order,:,0],fit[order,:,1])
        plt.plot(fitpoints[order,:pr,0], fitpoints[order,:pr,1], 'r+')
        plt.ylim(0,(1.25*ymax))
        plt.xlim(xmin, xmax)
        plt.subplot(212)
        plt.title('Normalized Spectra')
        plt.ylabel('Normalized Flux')
        plt.xlabel(r'Wavelength $(\AA)$')
        plt.plot(normspec[order,:,0],normspec[order,:,1])
        plt.plot(redline[:,0], redline[:,1])
        plt.plot(fitpoints[order,:pr,0],np.ones(len(range(pr))), 'go')
        plt.ylim(0.5, 1.5)
        plt.xlim(xmin, xmax)
        pltfilename = (objectn+'-'+objectd+
                       'Reference-Data-Fit-'+'Order'+ro+'.png')
        plt.savefig(pltfilename, dpi=300)
        print('Saving Fit-Plot and data files for order '+str(order))

# Check for normalized file, if found ask if you want to overwrite then,
# write out the final nomalized data into a new fits file and add the
# modifications made and time of modifications. Also write the header to a
# text file for inclusion with the data text files.
    if renorm == True:
        newfilename = pwd+'/'+renormfile
    else:
        newfilename = pwd+'/'+objectn+'-'+objectd+'-Normalized.fits'
    skip = False
    try:
        if renorm == True:
            normspec = np.copy(respec)
        with open(newfilename): pass
        print(newfilename+' Allready exists')
        yn = raw_input('Overwrite Files? (y/n):')
        yesnocheck(yn)
        if yn=='y':
            print('Writing .fits File')
            hdulist = pyfits.open('../'+filename)
            data = hdulist[0].data
            prihdr = hdulist[0].header
            now = datetime.datetime.now()

            # Add renorm data to header if needed.
            if renorm == True:
                hdu = pyfits.open('../'+renormfile)
                hdu[0].header['history'] = 'Orders '+str(orders).strip('[]')+ \
                                           ' renormalized on ' \
                                           +now.strftime("%Y-%m-%d %H:%M")
                hdu[0].header.totextfile(objectn+'-'+objectd+'-Header.dat',
                                         clobber=True)
                # Make HDUd and write the files.
                hdu[0].data = normspec
                hdu.writeto(newfilename, output_verify='ignore', clobber=True)
                hdu.close()
            else:
                prihdr['history'] = 'All orders normalized on ' \
                                    +now.strftime("%Y-%m-%d %H:%M")
                hdulist[0].header.totextfile(objectn+'-'+objectd+'-Header.dat',
                                             clobber=True)
                # Make HDUd and write the files.
                hdulist[0].data = normspec
                hdulist.writeto(newfilename, output_verify='ignore',
                                clobber=True)
                hdulist.close()

            # Define file and directory names for file operations.
            fitplot = objectn+'-'+objectd+'Normaliztion-Fit-Plots'
            datatxt = objectn+'-'+objectd+'Normalized-Data-Text-Files'
            fitdata = objectn+'-'+objectd+'Fit-Function-Text-Files'

            print('Moving Files')
            os.system('mv *Order*.png '+fitplot)
            os.system('mv *Normalized-Data.dat *Header.dat '+datatxt)
            os.system('mv *Fit-Function.dat '+fitdata)

            print('Smoothing')
            smooth3(normspec)

            # Draw a plot of the entire spectrum for referance.
            print('Generating Whole Spectrum Plot')
            xmin = normspec[0,0,0]
            xmax = normspec[61,800,0]
            ymax = 1.5
            fig = plt.figure(figsize=(16, 2))
            ax = fig.add_subplot(1,1,1,autoscale_on=False,
                                 ylim=(0,ymax),xlim=(xmin, xmax))
            plt.title(objectn+' '+objectd, fontsize=9)
            plt.xlabel(r'Wavelength ($\AA$)',fontsize=8)
            plt.ylabel('Flux', fontsize=8)
            ax.tick_params(axis='both', which='major', labelsize=6)
            ax.xaxis.set_minor_locator(minorLocator)
            ax.xaxis.set_major_locator(majorLocator)
            for order in range(62):
                ro = order
                if order%2==0:    # Check wiether order is odd or even.
                    ax.plot(sm[order,:,0],sm[order,:,1],
                           color='green', linewidth=.07)
                    ax.text(normspec[order,400,0], .9, ro,
                            fontsize=4, color='green',
                            horizontalalignment='center',
                            va='center')
                else:
                    ax.plot(sm[order,:,0],sm[order,:,1],
                            color='blue', linewidth=.07)
                    ax.text(normspec[order,400,0], 1.1, ro,
                            fontsize=4, color='blue',
                            horizontalalignment='center',
                           va='center')
            pltfilename = objectn+'-'+objectd+'-Whole-Spectra.png'
            plt.savefig(pltfilename, bbox_inches='tight', dpi=600)
            print('Finished Normalization, Have Fun!')

            skip = True
        else:
            # Preform all the above operations with a new filename.
            print('Type new filename addition without .fits')
            print('Example: '+objectn+'-'+objectd+'-Normalized-blablabla')
            newfilext = raw_input(objectn+'-'+objectd+'-Normalized-')
            newfilename = pwd+'/'+objectn+'-'+objectd+'-Normalized-' \
                        +newfilext+'.fits'

            fitplot = objectn+'-'+objectd+ \
                      'Normaliztion-Fit-Plots-'+newfilext
            datatxt = objectn+'-'+objectd+ \
                      'Normalized-Data-Text-Files-'+newfilext
            fitdata = objectn+'-'+objectd+ \
                      'Fit-Function-Text-Files-'+newfilext

            print('Writing .fits File')
            hdulist = pyfits.open('../'+filename)
            data = hdulist[0].data
            prihdr = hdulist[0].header
            now = datetime.datetime.now()
            if renorm == True:
                hdu = pyfits.open('../'+renormfile)
                hdu[0].header['history'] = 'Orders '+str(orders).strip('[]')+ \
                                           ' renormalized on ' \
                                           +now.strftime("%Y-%m-%d %H:%M")
                hdu[0].header.totextfile(objectn+'-'+objectd+'-Header-'
                                         +newfilext+'.dat', clobber=True)
                # Make HDUd and write the files.
                hdu[0].data = normspec
                hdu.writeto(newfilename, output_verify='ignore', clobber=True)
                hdu.close()
            else:
                prihdr['history'] = 'All orders normalized on ' \
                                    +now.strftime("%Y-%m-%d %H:%M")
                hdulist[0].header.totextfile(objectn+'-'+objectd+
                                             '-Header-'+newfilext+'.dat')
                hdulist[0].data = normspec
                hdulist.writeto(newfilename, output_verify='ignore')
                hdulist.close()

            print('Building Directory Tree and Moving Files!')

            os.system('mkdir '+fitplot+' && mv *Order*.png '+fitplot)

            os.system('mkdir '+datatxt+
                      ' && mv *Normalized-Data.dat *Header-'
                      +newfilext+'.dat '+datatxt)

            os.system('mkdir '+fitdata+' && mv *Fit-Function.dat '+fitdata)

            print('Smoothing')
            smooth3(normspec)

            # Draw a plot of the entire spectrum for referance.
            print('Generating Whole Spectrum Plot')
            xmin = normspec[0,0,0]
            xmax = normspec[61,800,0]
            ymax = 1.5
            fig = plt.figure(figsize=(16, 2))
            ax = fig.add_subplot(1,1,1,autoscale_on=False,
                                 ylim=(0,ymax),xlim=(xmin, xmax))
            plt.title(objectn+' '+objectd, fontsize=9)
            plt.xlabel(r'Wavelength ($\AA$)',fontsize=8)
            plt.ylabel('Flux', fontsize=8)
            ax.tick_params(axis='both', which='major', labelsize=6)
            ax.xaxis.set_minor_locator(minorLocator)
            ax.xaxis.set_major_locator(majorLocator)
            for order in range(62):
                ro = order
                if order%2==0:
                    ax.plot(sm[order,:,0],sm[order,:,1],
                           color='green', linewidth=.07)
                    ax.text(normspec[order,400,0], .9, ro,
                            fontsize=4, color='green',
                            horizontalalignment='center',
                            va='center')
                else:
                    ax.plot(sm[order,:,0],sm[order,:,1],
                            color='blue', linewidth=.07)
                    ax.text(normspec[order,400,0], 1.1, ro,
                            fontsize=4, color='blue',
                            horizontalalignment='center',
                           va='center')
            pltfilename = objectn+'-'+objectd+ \
                          '-Whole-Spectra-'+newfilext+'.png'
            plt.savefig(pltfilename, bbox_inches='tight', dpi=600)
            print('Finished Normalization, Have Fun!')
            skip = True


            ct = raw_input('Create Tarballs (y/n)? ')
            yesnocheck(ct)
            if ct == 'y':
                print('Creating Tarballs')
                os.system('tar -czf '+fitplot+
                          '.tgz '+fitplot)
                os.system('tar -czf '+datatxt+
                          '.tgz '+datatxt)
                os.system('tar -czf '+fitdata+
                          '.tgz '+fitdata)

    except IOError:
        print('Writing .fits File')
        hdulist = pyfits.open('../'+filename)
        data = hdulist[0].data
        prihdr = hdulist[0].header
        now = datetime.datetime.now()
        prihdr['history'] = 'All orders normalized on ' \
                            +now.strftime("%Y-%m-%d %H:%M") \
                            +' By Brandon'
        hdulist[0].header.totextfile(objectn+'-'+objectd+'-Header.dat')
        hdulist[0].data = normspec
        hdulist.writeto(newfilename, output_verify='ignore')
        hdulist.close()

# Create .tgz archive of all the fit and data .dat files and the normaliztion
# referance images and remove all the .dat and .png files outside of archive.
    if skip == False:
        print('Building Directory Tree and Moving Files!')
        fitplot = objectn+'-'+objectd+'Normaliztion-Fit-Plots'
        os.system('mkdir '+fitplot+' && mv *Order*.png '+fitplot)
        datatxt = objectn+'-'+objectd+'Normalized-Data-Text-Files'
        os.system('mkdir '+datatxt+
                  ' && mv *Normalized-Data.dat *Header.dat '+datatxt)
        fitdata = objectn+'-'+objectd+'Fit-Function-Text-Files'
        os.system('mkdir '+fitdata+' && mv *Fit-Function.dat '+fitdata)

        ct = raw_input('Create Tarballs (y/n)? ')
        yesnocheck(ct)
        if ct == 'y':
            print('Creating Tarballs')
            os.system('tar -czf '+fitplot+
                      '.tgz '+fitplot)
            os.system('tar -czf '+datatxt+
                      '.tgz '+datatxt)
            os.system('tar -czf '+fitdata+
                      '.tgz '+fitdata)

# Draw a plot of the entire spectrum for referance.
    if skip == False:
        print('Smoothing')
        smooth3(normspec)

        print('Generating Whole Spectrum Plot')
        xmin = normspec[0,0,0]
        xmax = normspec[61,800,0]
        ymax = 1.5
        fig = plt.figure(figsize=(16, 2))
        ax = fig.add_subplot(1,1,1,autoscale_on=False,
                             ylim=(0,ymax),xlim=(xmin, xmax))
        plt.title(objectn+' '+objectd, fontsize=9)
        plt.xlabel(r'Wavelength ($\AA$)',fontsize=8)
        plt.ylabel('Flux', fontsize=8)
        ax.tick_params(axis='both', which='major', labelsize=6)
        ax.xaxis.set_minor_locator(minorLocator)
        ax.xaxis.set_major_locator(majorLocator)
        for order in range(62):
            ro = order
            if order%2==0:
                ax.plot(sm[order,:,0],sm[order,:,1],
                       color='green', linewidth=.07)
                ax.text(normspec[order,400,0], .9, order,
                        fontsize=4, color='green',
                        horizontalalignment='center',
                        va='center')
            else:
                ax.plot(sm[order,:,0],sm[order,:,1],
                        color='blue', linewidth=.07)
                ax.text(normspec[order,400,0], 1.1, ro,
                        fontsize=4, color='blue',
                        horizontalalignment='center',
                        va='center')
        pltfilename = objectn+'-'+objectd+'-Whole-Spectra.png'
        plt.savefig(pltfilename, bbox_inches='tight', dpi=800)

        print('Finished Normalization, Have Fun!')
    os.chdir(pwd)
