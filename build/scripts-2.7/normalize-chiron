#!/usr/bin/python2
import sys
import os
import datetime
import math

import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import MultipleLocator
import pyfits

import interactivenorm

# Normalize-CHIRON version 2.0.3
# Written by Brandon Bell April 2013


orders = range(62)

if len(sys.argv) != 2: 
    print("Error: must give me one file to work on!")
    exit()

# Read in the fits file, retirve header info for latter use and pull out set
# the objets name and date of observation into variables for record keeping.
filename = sys.argv[1]
spec, header = pyfits.getdata(filename, 0, header=True)
objectn = header['object']
objectn = objectn.split('-')[0] #in case of combined name and date.
objectd = header['UTSHUT']
objectd = objectd.split('T')[0] #Keeps only date, not the time of exp.

# Check the current Dir(where cmd was run) and IF it is not a directory named
# specificaly for the current object and it's date of observation move to
# that directory or make the new directory if it doesn't exist and then move
# there.
newdir = objectn+'-'+objectd+'/'
pwd = os.getcwd()
if pwd.split('/')[-1] != objectn+'-'+objectd:
    try:
        os.chdir(pwd+'/'+newdir)
    except:
        os.system('mkdir '+pwd+'/'+newdir)
        os.chdir(newdir)
        
# Re-format the spectra array into a list of arrays for interactive norm to
# proccess. This is done so that interactive norm can handle spectra with
# differnt sized orders.
spectra = []
for band in range(np.shape(spec)[0]):
    spectra.append(np.array(spec[band,:,:]))
    
# start normalizing the spectra with interactive norm and if your renormalizing
# the data, load the previously pickled data and start from there.
spect = interactivenorm.SpecNormalize(spectra,objectn,objectd)
try:
    spect.read_pickle()
except:
    pass

spect.start_norm()
spect.write_pickle()
spec = spectra


def yesnocheck(yn):
    """Check weither or not user yes/no input is in the right format and if
    it's not, ask for new input"""
    if yn =='y':
        return yn
    elif yn=='n':
        return yn
    else:
        print('Please enter yes (y) or no (n)')
        yn = raw_input('(y/n): ')
        yesnocheck(yn)
    return yn

do_plot = raw_input('Make Plots and .dat files? (y/n) ')
yesnocheck(do_plot)

def write_fits(filename,normname):
    hdulist = pyfits.open('../'+filename)
    data = hdulist[0].data
    prihdr = hdulist[0].header
    now = datetime.datetime.now()
    prihdr['history'] = 'normalized on ' \
            +now.strftime("%Y-%m-%d %H:%M") 
    hdulist[0].header.totextfile(normname+'-Header.dat')
    hdulist[0].data = spect.norm.filled([0])
    hdulist.writeto(normname, clobber=True)
    #hdulist.writeto(filename, clobber=True)
    hdulist.close()

if do_plot == 'y':
# Check for normalized file, if found ask if you want to overwrite then,
# write out the final nomalized data into a new fits file and add the
# modifications made and time of modifications. Also write the header to a
# text file for inclusion with the data text files.
    
    newfilename = pwd+'/'+objectn+'-'+objectd+'-Normalized.fits'
    skip = False
    try:
        with open(newfilename): pass
        print(newfilename+' Allready exists')
        yn = raw_input('Overwrite Files? (y/n):')
        yesnocheck(yn)
        if yn=='y':
            #spect.write_fits(newfilename)
            # Define file and directory names for file operations.
            fitplot = objectn+'-'+objectd+'Normaliztion-Fit-Plots'
            datatxt = objectn+'-'+objectd+'Normalized-Data-Text-Files'
            fitdata = objectn+'-'+objectd+'Fit-Function-Text-Files'

            print('Moving Files')
            os.system('mv *Order*.png '+fitplot)
            os.system('mv *Normalized-Data.dat *Header.dat '+datatxt)
            os.system('mv *Fit-Function.dat '+fitdata)

            # Draw a plot of the entire spectrum for referance.
            print('Generating Whole Spectrum Plot')
            spect.whole_spec_plot(25,100)
           
            print('Finished Normalization, Have Fun!')

            ct = raw_input('Create Tarballs (y/n)? ')
            yesnocheck(ct)
            if ct == 'y':
                print('Creating Tarballs')
                os.system('tar -czf '+fitplot+
                          '.tgz '+fitplot)
                os.system('tar -czf '+datatxt+
                          '.tgz '+datatxt)
                os.system('tar -czf '+fitdata+
                          '.tgz '+fitdata)
            skip = True
        else:
            # Preform all the above operations with a new filename.
            print('Type new filename addition without .fits')
            print('Example: '+objectn+'-'+objectd+'-Normalized-blablabla')
            newfilext = raw_input(objectn+'-'+objectd+'-Normalized-')
            newfilename = pwd+'/'+objectn+'-'+objectd+'-Normalized-' \
                        +newfilext+'.fits'

            fitplot = objectn+'-'+objectd+ \
                      'Normaliztion-Fit-Plots-'+newfilext
            datatxt = objectn+'-'+objectd+ \
                      'Normalized-Data-Text-Files-'+newfilext
            fitdata = objectn+'-'+objectd+ \
                      'Fit-Function-Text-Files-'+newfilext

             #           write_fits(newfilename)
            # Define file and directory names for file operations.
            fitplot = objectn+'-'+objectd+'Normaliztion-Fit-Plots'
            datatxt = objectn+'-'+objectd+'Normalized-Data-Text-Files'
            fitdata = objectn+'-'+objectd+'Fit-Function-Text-Files'

            print('Moving Files')
            os.system('mv *Order*.png '+fitplot)
            os.system('mv *Normalized-Data.dat *Header.dat '+datatxt)
            os.system('mv *Fit-Function.dat '+fitdata)


            # Draw a plot of the entire spectrum for referance.
            print('Generating Whole Spectrum Plot')
            spect.whole_spec_plot(25,100)
           
            print('Finished Normalization, Have Fun!')

            ct = raw_input('Create Tarballs (y/n)? ')
            yesnocheck(ct)
            if ct == 'y':
                print('Creating Tarballs')
                os.system('tar -czf '+fitplot+
                          '.tgz '+fitplot)
                os.system('tar -czf '+datatxt+
                          '.tgz '+datatxt)
                os.system('tar -czf '+fitdata+
                          '.tgz '+fitdata)

    except IOError:

        spect.plot_order_fits()
        write_fits(filename,newfilename)
#        head = hdulist[0].header.tostring(sep="\n", endcard=False)
#        hdulist[0].header.totextfile(objectn+'-'+objectd+'-Header.dat')
#        spect.dump_text_files()
#        hdulist.close()

# Create .tgz archive of all the fit and data .dat files and the normaliztion
# referance images and remove all the .dat and .png files outside of archive.
    if skip == False:
        print('Building Directory Tree and Moving Files!')
        fitplot = objectn+'-'+objectd+'Normaliztion-Fit-Plots'
        os.system('mkdir '+fitplot+' && mv *Order*.png '+fitplot)
        datatxt = objectn+'-'+objectd+'Normalized-Data-Text-Files'
        os.system('mkdir '+datatxt+
                  ' && mv *Normalized-Data.dat *Header.dat '+datatxt)
        fitdata = objectn+'-'+objectd+'Fit-Function-Text-Files'
        os.system('mkdir '+fitdata+' && mv *Fit-Function.dat '+fitdata)

        ct = raw_input('Create Tarballs (y/n)? ')
        yesnocheck(ct)
        if ct == 'y':
            print('Creating Tarballs')
            os.system('tar -czf '+fitplot+
                      '.tgz '+fitplot)
            os.system('tar -czf '+datatxt+
                      '.tgz '+datatxt)
            os.system('tar -czf '+fitdata+
                      '.tgz '+fitdata)

# Draw a plot of the entire spectrum for referance.
    if skip == False:
        spect.whole_spec_plot(25,100)

        print('Finished Normalization, Have Fun!')
    os.chdir(pwd)
